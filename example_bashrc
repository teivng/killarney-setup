# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
# XXX: Ubuntu lesspipe does not work with CC Gentoo Cvmfs env

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
module load gcc


# ---------------------------------
# 	  viet infiniband
# ---------------------------------

#export NCCL_SOCKET_IFNAME=ib0
#export GLOO_SOCKET_IFNAME=ib0
#export NCCL_NET=IB
#export NCCL_IB_DISABLE=0








# ---------------------------------
# 	    viet macros
# ---------------------------------


# aliases
alias b="vim ~/.bashrc"
alias bs="source ~/.bashrc"
alias m="cd /home/viet/projects/aip-rahulgk/viet"
alias wn="watch -n 0.5 nvidia-smi"
alias s="git status"
alias pp="git pull"
alias aa="git add . && git commit -m 'mraow' && git push"
alias sqq="squeue -o '%.9P %.8u %.20j %.2t %.10M %.20R %.20b' | sort -k6"
alias sc="scancel -u viet"
alias wsq="watch -n 0.5 squeue -u viet"
alias cn="checknode kn169 kn170 kn171 kn172 kn173 kn174 kn175 kn176 kn177 kn178"
alias jnp="jupyter notebook --no-browser --port=8888 --ip=0.0.0.0"
alias gg="gpu_node l40s 1 12 64G"
alias count="squeue -u viet | wc -l"

# functions
checknode() {
	~/.check_node_resources.sh "$@"
}

gpu_node() {
    if [ "$#" -ne 4 ]; then
        echo "Usage: gpu_node <gpu_type: h100|l40s> <num_gpus> <num_cpus> <ram>"
        return 1
    fi

    local gpu_type="$1"
    local num_gpus="$2"
    local num_cpus="$3"
    local ram="$4"

    if [[ "$gpu_type" != "h100" && "$gpu_type" != "l40s" ]]; then
        echo "Error: GPU type must be 'h100' or 'l40s'"
        return 1
    fi

    srun -A aip-rahulgk -c "$num_cpus" --gres=gpu:"$gpu_type":"$num_gpus" --mem="$ram" --time=3:00:00 --pty --export=ALL,SSH_AUTH_SOCK bash
}

t() {
	/home/viet/projects/aip-rahulgk/viet/code tunnel
}

source() {
  if [ -d "$HOME/$1/bin" ] && [ -f "$HOME/$1/bin/activate" ]; then
    # Source the virtual environment activate script
    . "$HOME/$1/bin/activate"
  else
    # Fallback to the default source behavior for other arguments
    command source "$@"
  fi
}

usage() {
	sshare -A aip-rahulgk -l --all | awk '
  NF >= 5 && $2 ~ /^[a-zA-Z0-9_-]+$/ && $5 ~ /^[0-9]+$/ {
    user = $2;
    usage[user] = $5;
    total += $5;
    users[n++] = user;
  }
  END {
    for (i = 0; i < n; i++) {
      u = users[i];
      pct = (usage[u] / total) * 100;
      printf "%-20s %15.0f %8.2f%\n", u, usage[u], pct;
    }
  }
' | sort -k3 -nr

}

usage_all() {
sshare -l --all | awk '
  NF >= 5 && $2 ~ /^[a-zA-Z0-9_-]+$/ && $5 ~ /^[0-9]+$/ {
    user = $2;
    usage[user] = $5;
    total += $5;
    users[n++] = user;
  }
  END {
    for (i = 0; i < n; i++) {
      u = users[i];
      if (usage[u] > 0) {
        pct = (usage[u] / total) * 100;
        printf "%-20s %15.0f %8.2f%\n", u, usage[u], pct;
      }
    }
  }
' | sort -k3 -nr

}

ssh () {
	ssh -A $@
}

# launch scripts

# ---------------------------------
# 	    viet modules
# ---------------------------------

module load rust/1.85


. "$HOME/.local/bin/env"
m

eval "$(starship init bash)"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/project/6101781/viet/google-cloud-sdk/path.bash.inc' ]; then . '/project/6101781/viet/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/project/6101781/viet/google-cloud-sdk/completion.bash.inc' ]; then . '/project/6101781/viet/google-cloud-sdk/completion.bash.inc'; fi
